struct Node{
    Node* links[26];
    bool flag;
    
    int countendwith=0;
    int cntprefix=0;
    
    bool containskey(char ch){
        return (links[ch-'a']!=NULL);
    }
    
    void put(char ch,Node* node){
        links[ch-'a']=node;
    }
    
    Node* getref(char ch){
        return links[ch-'a'];
    }
    
    void setend(){
        flag=true;
    }
    
    bool getend(){
        return flag;
    }
    
    void increaseend(){
        countendwith++;
    }
    
    void increaseprefix(){
        cntprefix++;
    }
    void deleteEnd() {
    countendwith--;
  }
      void reduceprefix() {
        cntprefix--;
      }
      int getEnd() {
        return countendwith;
      }
      int getPrefix() {
        return cntprefix;
      }
};
class Trie{
    private: Node* root;
    public:

    Trie(){
        // Write your code here.
        root=new Node();
    }

    void insert(string &word){
        // Write your code here.
        Node* node=root;
        for(int i=0;i<word.size();i++){
            if(!node->containskey(word[i])){
                node->put(word[i],new Node());
            }
            node=node->getref(word[i]);
            node->increaseprefix();
        }
        node->increaseend();
        node->setend();
    }

    int countWordsEqualTo(string &word){
        // Write your code here.
        Node* node=root;
        for(int i=0;i<word.size();i++){
            if(node->containskey(word[i])){
                node=node->getref(word[i]);
            }
            else return 0;
        }
        return node->getEnd();
    }

    int countWordsStartingWith(string &word){
        // Write your code here.
        Node* node=root;
        for(int i=0;i<word.size();i++){
            if(node->containskey(word[i])){
               node=node->getref(word[i]);
            }
            else return 0;
        }
        return node->getPrefix();
    }

    void erase(string &word){
        // Write your code here.
         Node* node=root;
        for(int i=0;i<word.size();i++){
            if(node->containskey(word[i])){
                node=node->getref(word[i]);
                node->reduceprefix();
            }
            else return;
        }
        node->deleteEnd();
    }
};
